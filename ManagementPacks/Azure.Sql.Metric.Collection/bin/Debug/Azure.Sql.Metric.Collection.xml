<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Azure.Sql.Metric.Collection</ID>
      <Version>1.0.0.9</Version>
    </Identity>
    <Name>Azure SQL Metric Collection</Name>
    <References>
      <Reference Alias="AzureSQL">
        <ID>Microsoft.SqlServer.Azure</ID>
        <Version>7.0.26.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>10.19.10050.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Perf">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8443.6</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Azure.Sql.Metric.Collection.DS" Accessibility="Internal" RunAs="AzureSQL!Microsoft.SqlServer.Azure.Profile.Workflow">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="GetDatabaseMetrics" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SubscriptionId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ServerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ResourceGroupName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="ElasticPoolName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="DatabaseName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="MetricName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="GetDatabaseMetrics" Selector="$Config/GetDatabaseMetrics$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Custom.SQLServer.DatabaseStatus.Monitor.DS.ps1</ScriptName>
                <ScriptBody>
param([string]$subscriptionId,[string]$clientId,[string]$clientSecret,[string]$sqlServerName,[string]$resourceGroupName,[string]$getDatabaseMetrics)

$api = New-Object -comObject MOM.ScriptAPI
$api.LogScriptEvent("Custom.SQLServer.DatabaseStatus.Monitor.DS.ps1", 4297, 0, "Script starting")

$tenantId = ''
$authUri = ''

# Getting the tenant ID is difficult if you only know the subscription ID and aren't logged in yet.
# It's a bit of a hack, but if you attempt to get the subscription without logging in first, the
# headers in the error response will include the authorization URI, which includes the tenant ID.
# I found this workaround at https://stackoverflow.com/questions/26384034/how-to-get-the-azure-account-tenant-id.
$subscriptionsUri = "https://management.azure.com/subscriptions/$subscriptionId`?api-version=2014-04-01"
try {

    $response = Invoke-RestMethod -Uri $subscriptionsUri -Method GET -ErrorVariable e
}
catch {

    # I found the object path for the headers at https://rasmusg.net/2021/04/20/working-with-http-errors-in-powershell.
    $headers = $e.ErrorRecord.Exception.Response.Headers
    
    $count = $headers.count

    for ($i = 0; $i -lt $count; $i++) {

        $charPosition = $headers[$i].IndexOf('authorization_uri')

        if ($charPosition -gt 0) {
            
            # Position immediately after the first quotation marks that apppear after 'authorization_uri'.
            $uriStart = $headers[$i].IndexOf('"', $charPosition) + 1
            
            # Position of the closing quotation marks after the authorization URI.
            $uriEnd = $headers[$i].IndexOf('"', $uriStart)

            # Extract the authorization URI substring and add '/oauth2/token'.
            $authUri = $headers[$i].Substring($uriStart, $uriEnd - $uriStart) + '/oauth2/token'
        }
    } 
}

$headers = @{
    'Content-Type' = 'application/x-www-form-urlencoded'
}

$body = @{
    grant_type = 'client_credentials'
    client_id = $clientId
    client_secret = $clientSecret
    resource = 'https://management.azure.com/'
}

$auth = Invoke-RestMethod -Method Post -Uri $authUri -Headers $headers -Body $body -UseDefaultCredentials

$token = $auth.access_token

$headers = @{
    'Authorization' = "Bearer $token"
}

$elasticPoolsUri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName" + `
    "/providers/Microsoft.Sql/servers/$sqlServerName/elasticPools?api-version=2014-04-01"

# Get the list of elastic pools for the resource group.
$elasticPools = Invoke-RestMethod -Method Get -Uri $elasticPoolsUri -Headers $headers

$elasticPoolNames = @()

# Put the elastic pool names into an array.
foreach ($elasticPool in $elasticPools) {
    
    $elasticPoolNames += $elasticPool.value.name
}

# Add more metric names to the comma-separated list as needed. Note that this is a single string value, *not* an array.
# For the list of available metrics, refer to the table "Microsoft.Sql/servers/elasticPools" at 
# https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/metrics-supported
$elasticPoolMetricNames = 'allocated_data_storage,allocated_data_storage_percent,storage_used,storage_percent'

foreach ($elasticPoolName in $elasticPoolNames) {

    $metricsUri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName" + `
        "/providers/Microsoft.Sql/servers/$sqlServerName/elasticPools/$elasticPoolName/providers/Microsoft.Insights/metrics?api-version=2018-01-01" + `
        "&amp;interval=PT1M&amp;metricnames=$elasticPoolMetricNames"

    # Get the list of metrics for the elastic pool.
    $elasticPoolMetricsResults = Invoke-RestMethod -Method Get -Uri $metricsUri -Headers $headers

    foreach ($metric in $elasticPoolMetricsResults.value) {

        $metricName = $metric.displayDescription.Split('.')[0]

        $data = $metric.timeseries.data      

        $count = $data.Count      

        # The three possible aggregation types for these metrcis are Average, Maximum and Total.
        # Note that I'm only getting the most recent value in the time series array i.e. [$count - 1].
        if ($data.average -ne $null) {

            $value = $data[$count - 1].average
        }
        elseif ($data.maximum -ne $null) {

            $value = $data[$count - 1].maximum
        }
        elseif ($data.total -ne $null) {

            $value = $data[$count - 1].total
        }

        $bag = $api.CreatePropertyBag()
        $bag.AddValue('ElasticPoolName', $elasticPoolName)
        $bag.AddValue('MetricName', $metricName)
        $bag.AddValue('Value', $value)
        $bag
    }
}

if ($getDatabaseMetrics -eq "true") {

    $databaseNames = @()

    $databasesUri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName" + `
        "/providers/Microsoft.Sql/servers/$sqlServerName/databases?api-version=2014-04-01"

    # Get the list of databases for the resource group.
    $databases = Invoke-RestMethod -Method Get -Uri $databasesUri -Headers $headers

    # Put the database names into an array.
    foreach ($database in $databases.value) {
        
		$databaseNames += $database.name
    }

    # Add more metric names to the comma-separated list as needed. Note that this is a single string value, *not* an array.
    # For the list of available metrics, refer to the table "Microsoft.Sql/servers/databases" at 
    # https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/metrics-supported
    $databaseMetricNames = 'allocated_data_storage,storage,storage_percent'

    foreach ($databaseName in $databaseNames) {

        if ($databaseName -eq 'master') {
            
            Continue
        }

        $metricsUri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName" + `
            "/providers/Microsoft.Sql/servers/$sqlServerName/databases/$databaseName/providers/Microsoft.Insights/metrics?api-version=2018-01-01" + `
            "&amp;interval=PT1M&amp;metricnames=$databaseMetricNames"

        # Get the list of metrics for the database.
        $databaseMetricsResults = Invoke-RestMethod -Method Get -Uri $metricsUri -Headers $headers

        foreach ($metric in $databaseMetricsResults.value) {

            $metricName = $metric.displayDescription.Split('.')[0]            

            $data = $metric.timeseries.data    

            $count = $data.Count      

            # The three possible aggregation types for these metrcis are Average, Maximum and Total.
            # Note that I'm only getting the most recent value in the time series array i.e. [$count - 1].
            if ($data.average -ne $null) {
                
                $value = $data[$count - 1].average
            }
            elseif ($data.maximum -ne $null) {

                $value = $data[$count - 1].maximum
            }
            elseif ($data.total -ne $null) {

                $value = $data[$count - 1].total
            }

            $bag = $api.CreatePropertyBag()
            $bag.AddValue('DatabaseName', $databaseName)
            $bag.AddValue('MetricName', $metricName)
            $bag.AddValue('Value', $value)
            $bag
        }
    }
}								
							 </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SubscriptionId</Name>
                    <Value>$Config/SubscriptionId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ClientId</Name>
                    <Value>$RunAs[Name="AzureSQL!Microsoft.SqlServer.Azure.Profile.Workflow"]/UserName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ClientSecret</Name>
                    <Value>$RunAs[Name="AzureSQL!Microsoft.SqlServer.Azure.Profile.Workflow"]/Password$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ServerName</Name>
                    <Value>$Config/ServerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ResourceGroupName</Name>
                    <Value>$Config/ResourceGroupName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>GetDatabaseMetrics</Name>
                    <Value>$Config/GetDatabaseMetrics$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <Or>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Property[@Name='ElasticPoolName']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">$Config/ElasticPoolName$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Property[@Name='MetricName']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">$Config/MetricName$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </And>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Property[@Name='DatabaseName']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">$Config/DatabaseName$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Property[@Name='MetricName']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">$Config/MetricName$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </And>
                    </Expression>
                  </Or>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="PerfMapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>SQL Azure Metric</ObjectName>
                <CounterName>$Data/Property[@Name='MetricName']$</CounterName>
                <InstanceName></InstanceName>
                <Value>$Data/Property[@Name='Value']$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="PerfMapper">
                <Node ID="InstanceFilter">
                  <Node ID="PA">
                    <Node ID="Scheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Collect.DataSpaceAllocatedPercent.Rule" Enabled="true" Target="AzureSQL!Microsoft.SqlServer.Azure.ElasticPool">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Azure.Sql.Metric.Collection.DS">
            <IntervalSeconds>900</IntervalSeconds>
            <SyncTime />
            <GetDatabaseMetrics>false</GetDatabaseMetrics>
            <SubscriptionId>$Target/Host/Property[Type="AzureSQL!Microsoft.SqlServer.Azure.Server"]/Subscription$</SubscriptionId>
            <ServerName>$Target/Host/Property[Type="AzureSQL!Microsoft.SqlServer.Azure.Server"]/Name$</ServerName>
            <ResourceGroupName>$Target/Host/Property[Type="AzureSQL!Microsoft.SqlServer.Azure.Server"]/ResourceGroupName$</ResourceGroupName>
            <ElasticPoolName>$Target/Property[Type="AzureSQL!Microsoft.SqlServer.Azure.ElasticPool"]/ElasticPoolName$</ElasticPoolName>
            <DatabaseName />
            <MetricName>Data space allocated percent</MetricName>
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Azure.Sql.Metric.Collection">
          <Name>Azure SQL Metric Collection</Name>
          <Description>Collects additional Azure SQL metrics</Description>
        </DisplayString>
        <DisplayString ElementID="Collect.DataSpaceAllocatedPercent.Rule">
          <Name>Elastic Pool - Data Space Allocated Percent Collection Rule</Name>
          <Description>Rule to collect the Data Space Allocated Percent metric for the Elastic Pool class</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>