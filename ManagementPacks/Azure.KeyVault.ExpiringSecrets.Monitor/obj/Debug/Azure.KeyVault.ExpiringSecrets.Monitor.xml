<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Azure.KeyVault.ExpiringSecrets.Monitor</ID>
      <Version>1.0.0.20</Version>
    </Identity>
    <Name>Azure KeyVault ExpiringSecrets Monitor</Name>
    <References>
      <Reference Alias="Instance">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Azure">
        <ID>Microsoft.SystemCenter.MicrosoftAzure</ID>
        <Version>1.8.0.9</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Azure.KeyVaults.Group" Accessibility="Public" Abstract="false" Base="Instance!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="Azure.KeyVault.ExpiringSecrets.DS" Accessibility="Internal">
        <Configuration>
          <xsd:element name="IntervalHours" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SubscriptionId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="KeyVaultName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WarningThresholdDays" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalHours" Selector="$Config/IntervalHours$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="WarningThresholdDays" Selector="$Config/WarningThresholdDays$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Hours">$Config/IntervalHours$</Interval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Azure.KeyVault.ExpiringSecrets.Check.ps1</ScriptName>
                <ScriptBody>
param($subscriptionId,$clientId,$clientSecret,$warningThresholdDays)

$currentUtcTime = (Get-Date).ToUniversalTime()

# Get a Windows datetime value equal to Unix zero timestamp.
# This is used later to convert Unix timestamps from the Azure API.
$unixZeroDate = Get-Date -Date '1970-01-01'

$api = New-Object -comObject MOM.ScriptAPI

$api.LogScriptEvent("Azure.KeyVault.ExpiringSecrets.Check.ps1", 5297, 0, "Script starting with paramaters: " +
	"`nSubscriptionId = $subscriptionId" +
	"`nClientId = $clientId" +
    "`nWarningThresholdDays = $warningThresholdDays")

# Getting the tenant ID is difficult if you only know the subscription ID and aren't logged in yet.
# It's a bit of a hack, but if you attempt to get the subscription without logging in first, the
# headers in the error response will include the authorization URI, which includes the tenant ID.
# I found this workaround at https://stackoverflow.com/questions/26384034/how-to-get-the-azure-account-tenant-id.
$subscriptionsUri = "https://management.azure.com/subscriptions/$subscriptionId`?api-version=2014-04-01"
try {

    $response = Invoke-RestMethod -Uri $subscriptionsUri -Method GET -ErrorVariable e
}
catch {

    # I found the object path for the headers at https://rasmusg.net/2021/04/20/working-with-http-errors-in-powershell.
    $headers = $e.ErrorRecord.Exception.Response.Headers
    
    $count = $headers.count

    for ($i = 0; $i -lt $count; $i++) {

        $charPosition = $headers[$i].IndexOf('authorization_uri')

        if ($charPosition -gt 0) {
            
            # Position immediately after the first quotation marks that apppear after 'authorization_uri'.
            $uriStart = $headers[$i].IndexOf('"', $charPosition) + 1
            
            # Position of the closing quotation marks after the authorization URI.
            $uriEnd = $headers[$i].IndexOf('"', $uriStart)

            # Extract the authorization URI substring and add '/oauth2/token'.
            $authUri = $headers[$i].Substring($uriStart, $uriEnd - $uriStart) + '/oauth2/token'
        }
    } 
}

$headers = @{
    'Content-Type' = 'application/x-www-form-urlencoded'
}

$body = @{
    grant_type = 'client_credentials'
    client_id = $clientId
    client_secret = $clientSecret
    resource = 'https://management.azure.com/'
}

$auth = Invoke-RestMethod -Method Post -Uri $authUri -Headers $headers -Body $body -UseDefaultCredentials

$token = $auth.access_token

$headers = @{
    'Authorization' = "Bearer $token"
}

$listKeyVaultsUri = "https://management.azure.com/subscriptions/$subscriptionId/resources" + `
    "?`$filter=resourceType eq 'Microsoft.KeyVault/vaults'&amp;api-version=2015-11-01"

# Do until the GET key vaults response doesn't include a next link.
do {

    # Get the list of key vaults for the subscription.
    $keyVaults = Invoke-RestMethod -Method Get -Uri $listKeyVaultsUri -Headers $headers

    # Enumerate the key vaults
    foreach ($keyVault in $keyVaults.value) {

        # Initialize strings for the property bag.
        $state = 'good'
        $expiringSecrets = ''
        $expiredSecrets = ''

        $keyVaultName = $keyVault.name    
        $keyVaultId = $keyVault.id

        $keyVaultSecretsUri = "https://management.azure.com$keyVaultId/secrets?api-version=2022-07-01"

        # Do until the GET secrets response doesn't include a next link.
        do {

            # Get secrets for the key vault.
            $keyVaultSecrets = Invoke-RestMethod -Method Get -Uri $keyVaultSecretsUri -Headers $headers

            # Check each secret in the value list for expiration.
            foreach ($keyVaultSecret in $keyVaultSecrets.value) {

                $name = $keyVaultSecret.name
                $exp = $keyVaultSecret.properties.attributes.exp

                # Convert the Unix timestamp (exp) to a Windows datetime.
                $expirationTime = $unixZeroDate.AddSeconds($exp)

                $timeDiff = $expirationTime - $currentUtcTime
        
                # Expired secrets.
                if ($timeDiff -lt 0) {

                    if ([System.String]::IsNullOrEmpty($expiredSecrets)) {

                        $expiredSecrets += "$name"
                        $state = 'bad'
                    }
                    else {

                        $expiredSecrets += ", $name"
                    }            
                }
                # Expiring within the threshold days.
                elseif ($timeDiff.Days -lt $warningThresholdDays) {

                    if ([System.String]::IsNullOrEmpty($expiringSecrets)) {

                        $expiringSecrets += "$name"
                        if ($state = 'good') {
                    
                            $state = 'warning'
                        }
                    }
                    else {

                        $expiringSecrets += ", $name"
                    }            
                }
            }

            # Check the key vault secrets nextLink indicating there are more secrets.
            $keyVaultSecretsUri = $keyVaultSecrets.nextLink

        } while ($keyVaultSecretsUri)

        $bag = $api.CreatePropertyBag()
        $bag.AddValue('KeyVaultName', $keyVaultName)
        $bag.AddValue('State', $state)
        $bag.AddValue('ExpiringSecrets', $expiringSecrets)
        $bag.AddValue('ExpiredSecrets', $expiredSecrets)
        $bag
    }

    # Check the key vaults nextLink indicating there are more key vaults.
    $listKeyVaultsUri = $keyVaults.nextLink

} while ($listKeyVaultsUri)						
				</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SubscriptionId</Name>
                    <Value>$Config/SubscriptionId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ClientId</Name>
                    <Value>$RunAs[Name="Azure!Microsoft.SystemCenter.MicrosoftAzure.RunAsProfile.ADCredentials"]/UserName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ClientSecret</Name>
                    <Value>$RunAs[Name="Azure!Microsoft.SystemCenter.MicrosoftAzure.RunAsProfile.ADCredentials"]/Password$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>WarningThresholdDays</Name>
                    <Value>$Config/WarningThresholdDays$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='KeyVaultName']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/KeyVaultName$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="InstanceFilter">
                <Node ID="ScriptProbe">
                  <Node ID="Scheduler" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Azure.KeyVault.ExpiringSecrets.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="SecretsNotExpiring" />
          <MonitorTypeState ID="SecretsExpiring" />
          <MonitorTypeState ID="SecretsExpired" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalHours" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SubscriptionId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="KeyVaultName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WarningThresholdDays" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalHours" Selector="$Config/IntervalHours$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="WarningThresholdDays" Selector="$Config/WarningThresholdDays$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Azure.KeyVault.ExpiringSecrets.DS">
              <IntervalHours>$Config/IntervalHours$</IntervalHours>
              <SyncTime />
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <SubscriptionId>$Config/SubscriptionId$</SubscriptionId>
              <KeyVaultName>$Config/KeyVaultName$</KeyVaultName>
              <WarningThresholdDays>$Config/WarningThresholdDays$</WarningThresholdDays>
            </DataSource>
            <ConditionDetection ID="SecretsNotExpiringCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">good</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="SecretsExpiringCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">warning</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="SecretsExpiredCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">bad</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="SecretsNotExpiring">
              <Node ID="SecretsNotExpiringCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="SecretsExpiring">
              <Node ID="SecretsExpiringCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="SecretsExpired">
              <Node ID="SecretsExpiredCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Azure.KeyVaults.Group.Discovery" Enabled="true" Target="Azure.KeyVaults.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="Instance!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Azure.KeyVaults.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Azure!Microsoft.SystemCenter.MicrosoftAzure.ArmService"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="Instance!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="Azure!Microsoft.SystemCenter.MicrosoftAzure.AzureServiceGeneric"]/Type$</Property>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value>Microsoft.KeyVault/vaults</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Monitors>
      <UnitMonitor ID="Azure.KeyVault.ExpiringSecrets.UnitMonitor" Enabled="false" Target="Azure!Microsoft.SystemCenter.MicrosoftAzure.ArmService" ParentMonitorID="Health!System.Health.AvailabilityState" Accessibility="Internal" TypeID="Azure.KeyVault.ExpiringSecrets.MonitorType">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="Azure.KeyVault.ExpiringSecrets.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="Azure!Microsoft.SystemCenter.MicrosoftAzure.AzureServiceGeneric"]/ServiceName$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="SecretsNotExpiring" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="SecretsExpiring" HealthState="Warning" />
          <OperationalState ID="Critical" MonitorTypeStateID="SecretsExpired" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalHours>12</IntervalHours>
          <SyncTime />
          <TimeoutSeconds>300</TimeoutSeconds>
          <SubscriptionId>$Target/Property[Type="Azure!Microsoft.SystemCenter.MicrosoftAzure.AzureServiceGeneric"]/SubscriptionId$</SubscriptionId>
          <KeyVaultName>$Target/Property[Type="Azure!Microsoft.SystemCenter.MicrosoftAzure.AzureServiceGeneric"]/ServiceName$</KeyVaultName>
          <WarningThresholdDays>3</WarningThresholdDays>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Overrides>
      <MonitorPropertyOverride ID="Enable.KeyVault.ExpiringSecrets.UnitMonitor.ForKeyVaultsGroup" Context="Azure.KeyVaults.Group" Enforced="false" Monitor="Azure.KeyVault.ExpiringSecrets.UnitMonitor" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Azure.KeyVault.ExpiringSecrets.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Azure.KeyVault.ExpiringSecrets.Monitor">
          <Name>Azure.KeyVault.ExpiringSecrets.Monitor</Name>
          <Description>Azure.KeyVault.ExpiringSecrets.Monitor</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>